generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                String             @id @default(uuid())
  fullName          String             @map("full_name")
  email             String             @unique
  university        String
  passwordHash      String             @map("password_hash")
  role              UserRole
  createdAt         DateTime           @default(now()) @map("created_at")
  updatedAt         DateTime           @updatedAt @map("updated_at")
  ambassadorProfile AmbassadorProfile?
  universityProfile UniversityProfile?

  @@map("users")
}

model AmbassadorProfile {
  id                         String       @id @default(uuid())
  userId                     String       @unique
  subject                    String?
  countryOriginal            String?      @map("country_original")
  countryCurrent             String?      @map("country_current")
  currentlyLivingCountry     String?      @map("currently_living_country")
  phoneNumber                String?      @map("phone_number")
  dob                        DateTime?
  gender                     String?
  languages                  String[]     @default([])
  leaveAPYear                Int?         @map("leave_ap_year")
  previousSchoolName         String?      @map("previous_school_name")
  currentlyUniversityStudent String?      @map("currently_university_student")
  currentUniversityName      String?      @map("current_university_name")
  calendlyLink               String?      @map("calendly_link")
  writtenContent             String?      @map("written_content")
  writtenDetails             String?      @map("written_details")
  profileImage               String?      @map("profile_image")
  services                   String[]     @default([])
  whyStudyingCourse          String?      @map("why_studying_course")
  skilsExperience            String?      @map("skills_experience")
  hobbiesInterests           String?      @map("hobbies_interests")
  caringCauses               String?      @map("caring_causes")
  accomplishmentsProudOf     String?      @map("accomplishments_proud_of")
  answerQ1                   String?      @map("answer_q1")
  answerQ2                   String?      @map("answer_q2")
  answerQ3                   String?      @map("answer_q3")
  answerQ4                   String?      @map("answer_q4")
  question1                  String?      @map("question1")
  question2                  String?      @map("question2")
  question3                  String?      @map("question3")
  isRegisteredAmbassador     String?      @map("is_registered_ambassador")
  createdAt                  DateTime     @default(now()) @map("created_at")
  updatedAt                  DateTime     @updatedAt @map("updated_at")
  user                       User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  following                  Following[]
  socialLinks                SocialLinks?

  @@map("ambassador_profiles")
}

model UniversityProfile {
  id                String   @id @default(uuid())
  userId            String   @unique
  widgetId          String?  @unique @map("widget_id")
  isVerified        Boolean  @default(false) @map("is_verified")
  widgetConfig      Json?    @map("widget_config")
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("university_profiles")
}

model SocialLinks {
  id           String            @id @default(uuid())
  ambassadorId String            @unique @map("ambassador_id")
  facebook     String?
  instagram    String?
  tiktok       String?
  x            String?
  linkedin     String?
  youtube      String?
  createdAt    DateTime          @default(now()) @map("created_at")
  updatedAt    DateTime          @updatedAt @map("updated_at")
  ambassador   AmbassadorProfile @relation(fields: [ambassadorId], references: [id], onDelete: Cascade)

  @@map("social_links")
}

model Following {
  id           String            @id @default(uuid())
  ambassadorId String            @map("ambassador_id")
  platform     String
  username     String
  createdAt    DateTime          @default(now()) @map("created_at")
  ambassador   AmbassadorProfile @relation(fields: [ambassadorId], references: [id], onDelete: Cascade)

  @@map("following")
}

model ChatClick {
  id          String   @id @default(uuid())
  widgetId    String   @map("widget_id")
  domain      String
  ipAddress   String   @map("ip_address")
  country     String?
  clickedAt   DateTime @default(now()) @map("clicked_at")
  createdAt   DateTime @default(now()) @map("created_at")

  @@map("chat_clicks")
  @@index([widgetId])
  @@index([domain])
  @@index([country])
  @@index([clickedAt])
}

enum UserRole {
  ambassador
  university
}
